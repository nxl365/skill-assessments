devtools::install_github("AckerDWM/gg3D")
devtools::install_github("AckerDWM/gg3D")
pca1 <- prcomp(df_1_nu, center=TRUE, scale=TRUE)
pp_1 <- autoplot(pca1, data = df_1  , colour = 'CLNSIG',
loadings = TRUE, loadings.colour = 'blue',
loadings.label = TRUE, loadings.label.size = 3, loadings.label.colour = 'black',
loadings.label.hjust=1,loadings.label.vjust=1, loadings.label.repel = T)+
ggtitle('17-23 Rankscore overlap data- pca (delet none SPIDEX/splicing)')
pp_1
pca1 <- prcomp(df_1_nu, center=TRUE, scale=TRUE)
pca2 <- prcomp(df_2_nu, center=TRUE,scale=TRUE)
pca3 <- prcomp(df_3_nu, center=TRUE,scale=TRUE)
pp_2 <- autoplot(pca2, data = df_2 , colour = 'CLNSIG',
loadings = TRUE, loadings.colour = 'blue',
loadings.label = TRUE, loadings.label.size = 3, loadings.label.colour = 'black',
loadings.label.hjust=1,loadings.label.vjust=1, loadings.label.repel = T)+
ggtitle('17-23 Rankscore overlap data- pca (none SPIDEX to 0/non-splicing & splicing)')
pp_2
pp_3 <- autoplot(pca3, data = df_3  , colour = 'CLNSIG',
loadings = TRUE, loadings.colour = 'blue',
loadings.label = TRUE, loadings.label.size = 3, loadings.label.colour = 'black',
loadings.label.hjust=1,loadings.label.vjust=1, loadings.label.repel = T) +
ggtitle('17-23 Rankscore overlap data- pca (only none SPIDEX /non-splicing)')
pp_3
pca1$x
library("scatterplot3d")
install.packages("scatterplot3d")
library("scatterplot3d")
install.packages("randomcoloR")
install.packages("factoextra")
install.packages("rgl")
install.packages("rmarkdown", repos = "https://cran.revolutionanalytics.com")
library(rgl)
library(rgl)
summary(pca1)
plot3d(pca1$scores[,1:3], col="red", type="p")
#install.packages("scatterplot3d")
library("scatterplot3d")
colors <- c( "#E69F00", "#56B4E9") # Number of color according to the number of groups
colors <- colors[as.numeric(df_1$CLNSIG)] # you can put here the column containing the name of population or sample etc.
s3d <-scatterplot3d(pca1$x[, 1], pca1$x[, 2],pca1$x[, 3],xlab="PC1",ylab="PC2", zlab="PC3", pch = 16,color=colors)
legend("right", legend = levels(df_1$CLNSIG),
col =  c( "#E69F00", "#56B4E9"), pch = 16)
colors <- c( "#E69F00", "#56B4E9") # Number of color according to the number of groups
colors <- colors[as.numeric(df_1$CLNSIG)] # you can put here the column containing the name of population or sample etc.
s3d <-scatterplot3d(pca1$x[, 1], pca1$x[, 2],pca1$x[, 3],xlab="PC1",ylab="PC2", zlab="PC3", pch = 16,color=colors)
legend("right", legend = levels(df_1$CLNSIG),col =  c( "#E69F00", "#56B4E9"), pch = 16)
df_1$CLNSIG
s3d
library(ggplot2)
s3d <-scatterplot3d(pca1$x[, 1], pca1$x[, 2],pca1$x[, 3],xlab="PC1",ylab="PC2", zlab="PC3", pch = 16,color=colors)
s3d <-scatterplot3d(pca1$x[, 1], pca1$x[, 2],pca1$x[, 3],xlab="PC1",ylab="PC2", zlab="PC3", pch = 16,color=colors)+
legend("right", legend = levels(df_1$CLNSIG),col =  c( "#E69F00", "#56B4E9"), pch = 16)
p11<-scatterplot3d(pca1$x[, 1:3])
p11<-scatterplot3d(pca1$x[, 1:3],angle = 55)
p11<-scatterplot3d(pca1$x[, 1:3])
pp_1 <- autoplot(pca1, data = df_1  , colour = 'CLNSIG',
loadings = TRUE, loadings.colour = 'blue',
loadings.label = TRUE, loadings.label.size = 3, loadings.label.colour = 'black',
loadings.label.hjust=1,loadings.label.vjust=1, loadings.label.repel = T)+
ggtitle('17-23 Rankscore overlap data- pca (delet none SPIDEX/splicing)')
pp_1
pp_2 <- autoplot(pca2, data = df_2 , colour = 'CLNSIG',
loadings = TRUE, loadings.colour = 'blue',
loadings.label = TRUE, loadings.label.size = 3, loadings.label.colour = 'black',
loadings.label.hjust=1,loadings.label.vjust=1, loadings.label.repel = T)+
ggtitle('17-23 Rankscore overlap data- pca (none SPIDEX to 0/non-splicing & splicing)')
pp_2
pp_3 <- autoplot(pca3, data = df_3  , colour = 'CLNSIG',
loadings = TRUE, loadings.colour = 'blue',
loadings.label = TRUE, loadings.label.size = 3, loadings.label.colour = 'black',
loadings.label.hjust=1,loadings.label.vjust=1, loadings.label.repel = T) +
ggtitle('17-23 Rankscore overlap data- pca (only none SPIDEX /non-splicing)')
pp_3
p1<- ggplot(data = melted_corr_1, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()+
geom_text(aes(Var2, Var1, label = value),color = "black", size = 1) +
scale_fill_gradient2(low = "blue", high = "red",limit = c(-1,1), name="Correlation") +
theme(axis.title.x = element_blank(),axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
axis.title.y = element_blank(),
panel.background = element_blank())
p1
p2<- ggplot(data = melted_corr_2, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()+
geom_text(aes(Var2, Var1, label = value),color = "black", size = 1) +
scale_fill_gradient2(low = "blue", high = "red",limit = c(-1,1), name="Correlation") +
theme(axis.title.x = element_blank(),axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
axis.title.y = element_blank(),
panel.background = element_blank())
p2
p3<- ggplot(data = melted_corr_3, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()+
geom_text(aes(Var2, Var1, label = value),color = "black", size = 1) +
scale_fill_gradient2(low = "blue", high = "red",limit = c(-1,1), name="Correlation") +
theme(axis.title.x = element_blank(),axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
axis.title.y = element_blank(),
panel.background = element_blank())
p3
table(df1$CLNSIG)
table(df_1$CLNSIG)
table(df_2$CLNSIG)
table(df_3$CLNSIG)
library(reshape2)
library(ggplot2)
library(ggfortify)
library(reshape2)
View(pca3)
df_1 <- read.table('/Users/nancy/Desktop/RS_projects/data/02_data_analysis/06_CSQ/04_impactMODERATE_sub_1.csv', header = TRUE, sep=',')
df_2 <- read.table('/Users/nancy/Desktop/RS_projects/data/02_data_analysis/06_CSQ/04_impactMODERATE_sub_2.csv', header = TRUE, sep=',')
View(df_1)
df_1 <- read.table('/Users/nancy/Desktop/RS_projects/data/02_data_analysis/06_CSQ/04_impactMODERATE_sub_1.csv', header = TRUE, sep=',')
df_2 <- read.table('/Users/nancy/Desktop/RS_projects/data/02_data_analysis/06_CSQ/04_impactMODERATE_sub_2.csv', header = TRUE, sep=',')
table(df_1$CLNSIG)
table(df_2$CLNSIG)
df_1 <- read.table('/Users/nancy/Desktop/RS_projects/data/02_data_analysis/06_CSQ/04_impactMODERATE_sub_1.csv', header = TRUE, sep=',')
table(df_1$CLNSIG)
table(df_2$CLNSIG)
View(df_1)
names(df_1)
View(df_1)
df_1_nu <- df_1[,-13]
View(df_2)
df_2 <- read.table('/Users/nancy/Desktop/RS_projects/data/02_data_analysis/06_CSQ/04_impactMODERATE_sub_2.csv', header = TRUE, sep=',')
View(df_2)
df_1_nu <- df_1[,-13]
df_2_nu <- df_2[,-1]
# do pca
pca1 <- prcomp(df_1_nu, center=TRUE, scale=TRUE)
pca2 <- prcomp(df_2_nu, center=TRUE,scale=TRUE)
df_2 <- read.table('/Users/nancy/Desktop/RS_projects/data/02_data_analysis/06_CSQ/04_impactMODERATE_sub_2.csv', header = TRUE, sep=',')
df_2_nu <- df_2[,-1]
pca1 <- prcomp(df_1_nu, center=TRUE, scale=TRUE)
pca2 <- prcomp(df_2_nu, center=TRUE,scale=TRUE)
pp_1 <- autoplot(pca1, data = df_1  , colour = 'CLNSIG',
loadings = TRUE, loadings.colour = 'blue',
loadings.label = TRUE, loadings.label.size = 3, loadings.label.colour = 'black',
loadings.label.hjust=1,loadings.label.vjust=1, loadings.label.repel = T)+
ggtitle('17-23 Rankscore overlap data- pca (delet none SPIDEX/splicing)')
pp_1
pp_2 <- autoplot(pca2, data = df_2 , colour = 'CLNSIG',
loadings = TRUE, loadings.colour = 'blue',
loadings.label = TRUE, loadings.label.size = 3, loadings.label.colour = 'black',
loadings.label.hjust=1,loadings.label.vjust=1, loadings.label.repel = T)+
ggtitle('17-23 Rankscore overlap data- pca (none SPIDEX to 0/non-splicing & splicing)')
pp_2
## create a correlation matrix
corr_1 <- cor(df_1_nu)
corr_2 <- cor(df_2_nu)
## round to 2 decimal
corr_1 <- round(corr_1,2)
corr_2 <- round(corr_2,2)
dist_1 <- as.dist((1-corr_1)/2)
dist_2 <- as.dist((1-corr_2)/2)
hierarchical clustering the dist matrix
hc_1 <- hclust(dist_1)
corr_1 <-corr_1[hc_1$order, hc_1$order]
hc_2 <- hclust(dist_2)
corr_2 <-corr_2[hc_2$order, hc_2$order]
melted_corr_1 <- melt(corr_1)
#head(melted_corr_mat)
melted_corr_2 <- melt(corr_2)
p1<- ggplot(data = melted_corr_1, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()+
geom_text(aes(Var2, Var1, label = value),color = "black", size = 1) +
scale_fill_gradient2(low = "blue", high = "red",limit = c(-1,1), name="Correlation") +
theme(axis.title.x = element_blank(),axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
axis.title.y = element_blank(),
panel.background = element_blank())
p1
p2<- ggplot(data = melted_corr_2, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()+
geom_text(aes(Var2, Var1, label = value),color = "black", size = 1) +
scale_fill_gradient2(low = "blue", high = "red",limit = c(-1,1), name="Correlation") +
theme(axis.title.x = element_blank(),axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
axis.title.y = element_blank(),
panel.background = element_blank())
p2
library(reshape2)
library(ggplot2)
library(ggfortify)
df_1 <- read.table('/Users/nancy/Desktop/RS_projects/data/02_data_analysis/06_CSQ/04_impactMODERATE_sub_1.csv', header = TRUE, sep=',')
df_2 <- read.table('/Users/nancy/Desktop/RS_projects/data/02_data_analysis/06_CSQ/04_impactMODERATE_sub_2.csv', header = TRUE, sep=',')
table(df_1$CLNSIG)
table(df_2$CLNSIG)
df_1_nu <- df_1[,-13]
df_2_nu <- df_2[,-1]
pca1 <- prcomp(df_1_nu, center=TRUE, scale=TRUE)
pca2 <- prcomp(df_2_nu, center=TRUE,scale=TRUE)
pp_1 <- autoplot(pca1, data = df_1  , colour = 'CLNSIG',
loadings = TRUE, loadings.colour = 'blue',
loadings.label = TRUE, loadings.label.size = 3, loadings.label.colour = 'black',
loadings.label.hjust=1,loadings.label.vjust=1, loadings.label.repel = T)+
ggtitle('17-23 Rankscore overlap data- pca (delet none SPIDEX/splicing)')
pp_1
pp_2 <- autoplot(pca2, data = df_2 , colour = 'CLNSIG',
loadings = TRUE, loadings.colour = 'blue',
loadings.label = TRUE, loadings.label.size = 3, loadings.label.colour = 'black',
loadings.label.hjust=1,loadings.label.vjust=1, loadings.label.repel = T)+
ggtitle('17-23 Rankscore overlap data- pca (none SPIDEX to 0/non-splicing & splicing)')
pp_2
pp_1 <- autoplot(pca1, data = df_1  , colour = 'CLNSIG',
loadings = TRUE, loadings.colour = 'blue',
loadings.label = TRUE, loadings.label.size = 3, loadings.label.colour = 'black',
loadings.label.hjust=1,loadings.label.vjust=1, loadings.label.repel = T)+
ggtitle('17-23 Rankscore overlap data- pca (delet none SPIDEX/splicing)')
pp_1
pp_2 <- autoplot(pca2, data = df_2 , colour = 'CLNSIG',
loadings = TRUE, loadings.colour = 'blue',
loadings.label = TRUE, loadings.label.size = 3, loadings.label.colour = 'black',
loadings.label.hjust=1,loadings.label.vjust=1, loadings.label.repel = T)+
ggtitle('17-23 Rankscore overlap data- pca (none SPIDEX to 0/non-splicing & splicing)')
pp_2
table(df_1$CLNSIG)
table(df_2$CLNSIG)
table(df_1$CLNSIG)
table(df_2$CLNSIG)
table(df_1$CLNSIG)
table(df_2$CLNSIG)
View(pp_1)
library(reshape2)
library(ggplot2)
library(ggfortify)
library(reshape2)
library(ggplot2)
library(ggfortify)
################ PCA  plot ##################
df_1 <- read.table('/Users/nancy/Desktop/RS_projects/data/02_data_analysis/06_CSQ/04_impactMODERATE_sub_1.csv', header = TRUE, sep=',')
df_2 <- read.table('/Users/nancy/Desktop/RS_projects/data/02_data_analysis/06_CSQ/04_impactMODERATE_sub_2.csv', header = TRUE, sep=',')
pca1 <- prcomp(df_1_nu, center=TRUE, scale=TRUE)
pca1 <- prcomp(df_1_nu, center=TRUE, scale=TRUE)
df_1_nu <- df_1[,-13]
df_2_nu <- df_2[,-1]
# do pca
pca1 <- prcomp(df_1_nu, center=TRUE, scale=TRUE)
pca2 <- prcomp(df_2_nu, center=TRUE,scale=TRUE)
pp_1 <- autoplot(pca1, data = df_1  , colour = 'CLNSIG',
loadings = TRUE, loadings.colour = 'blue',
loadings.label = TRUE, loadings.label.size = 3, loadings.label.colour = 'black',
loadings.label.hjust=1,loadings.label.vjust=1, loadings.label.repel = T)+
ggtitle('17-23 Rankscore overlap data- pca (delet none SPIDEX/splicing)')
pp_1
pp_2 <- autoplot(pca2, data = df_2 , colour = 'CLNSIG',
loadings = TRUE, loadings.colour = 'blue',
loadings.label = TRUE, loadings.label.size = 3, loadings.label.colour = 'black',
loadings.label.hjust=1,loadings.label.vjust=1, loadings.label.repel = T)+
ggtitle('17-23 Rankscore overlap data- pca (none SPIDEX to 0/non-splicing & splicing)')
pp_2
## create a correlation matrix
corr_1 <- cor(df_1_nu)
corr_2 <- cor(df_2_nu)
## round to 2 decimal
corr_1 <- round(corr_1,2)
corr_2 <- round(corr_2,2)
# reorder corr matrix
# using corr coefficient as distance metric
dist_1 <- as.dist((1-corr_1)/2)
dist_2 <- as.dist((1-corr_2)/2)
# hierarchical clustering the dist matrix
hc_1 <- hclust(dist_1)
corr_1 <-corr_1[hc_1$order, hc_1$order]
hc_2 <- hclust(dist_2)
corr_2 <-corr_2[hc_2$order, hc_2$order]
# reduce the size of correlation matrix
melted_corr_1 <- melt(corr_1)
#head(melted_corr_mat)
melted_corr_2 <- melt(corr_2)
p1<- ggplot(data = melted_corr_1, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()+
geom_text(aes(Var2, Var1, label = value),color = "black", size = 1) +
scale_fill_gradient2(low = "blue", high = "red",limit = c(-1,1), name="Correlation") +
theme(axis.title.x = element_blank(),axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
axis.title.y = element_blank(),
panel.background = element_blank())
p1
p2<- ggplot(data = melted_corr_2, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()+
geom_text(aes(Var2, Var1, label = value),color = "black", size = 1) +
scale_fill_gradient2(low = "blue", high = "red",limit = c(-1,1), name="Correlation") +
theme(axis.title.x = element_blank(),axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
axis.title.y = element_blank(),
panel.background = element_blank())
p2
install.packages('ggstatsplot)
library(tidyverse)
library(patchwork)    # install.packages('patchwork')
library(vcd)   #install.packages('vcd')
library(ggstatsplot)
library(ggplot2)
########### ALL data ########
df_1 <- read.table('/Users/nancy/Desktop/RS_projects/data/02_data_analysis/06_CSQ/07_ALL_origin_biotype.csv', header = TRUE, sep=',')
ggbarstats(
data = df_1,
y = CLNSIG,
x = ORIGIN
) +
labs(caption = NULL) # remove caption
#plot 2-2
ggbarstats(
data = df_1,
x = CLNSIG,
y = ORIGIN
) +
labs(caption = NULL) # remove caption
mosaic(~ORIGIN+CLNSIG,
direction = c("v", "h"),
data = df_1,
shade = TRUE)
library(ggplot2)
library("tidyr")
library(ggpubr)
library(dplyr)
library(reshape2)
library(ggfortify)
library(ggrepel)
df <- read.table('/Users/nancy/Desktop/RS_projects/data/03_ML/01_train_model/01_featureV1/02_GB_LG_CADD_Rankscore_CLINVAR_patho_benign.csv', header = TRUE, sep=',')
#df_SPIDEXzero <- read.table('/Users/nancy/Desktop/RS_projects/data/02_data_analysis/04_overlap_rankscore/03_rankscore_overlap_clinvar19_SPIDEXzero.csv', header = TRUE, sep=',')
table(df$CLNSIG)
#table(df_SPIDEXzero$CLNSIG)
View(df)
names(df)
View(df)
df_new <- df %>%
pivot_longer(prediction_LG:RankScore, names_to="var", values_to="val") %>%
as.data.frame()
ggp1 <-
ggplot(df_new, aes(x = val,fill=CLNSIG))+
geom_histogram(aes(y = stat(count / sum(count))), position = "identity", alpha = 0.4) +     # in each bin: (count/this bin's total count) ; position = "identity": overlap transparent
scale_y_continuous(labels = scales::percent_format()) +
facet_wrap(~factor(var,levels=c("prediction_LG","score_LG","prediction_GB", "score_GB","CADD","RankScore")), scales = 'free') +   # reorder the Facets in pannel
xlab("Values")+
ylab("percentage of each value")+
ggtitle('Scores prediction for whole Clinvar pathogenic and benign variants' )
ggp1
df_2 <- read.table('/Users/nancy/Desktop/RS_projects/data/03_ML/01_train_model/01_featureV1/02_GB_LG_CADD_Rankscore_CLINVARmissen.csv', header = TRUE, sep=',')
#df_SPIDEXzero <- read.table('/Users/nancy/Desktop/RS_projects/data/02_data_analysis/04_overlap_rankscore/03_rankscore_overlap_clinvar19_SPIDEXzero.csv', header = TRUE, sep=',')
table(df_2$CLNSIG)
#table(df_SPIDEXzero$CLNSIG)
df_new <- df_2 %>%
pivot_longer(prediction_LG:RankScore, names_to="var", values_to="val") %>%
as.data.frame()
ggp1 <-
ggplot(df_new, aes(x = val,fill=CLNSIG))+
geom_histogram(aes(y = stat(count / sum(count))), position = "identity", alpha = 0.4) +     # in each bin: (count/this bin's total count) ; position = "identity": overlap transparent
scale_y_continuous(labels = scales::percent_format()) +
facet_wrap(~factor(var,levels=c("prediction_LG","score_LG","prediction_GB", "score_GB","CADD","RankScore")), scales = 'free') +   # reorder the Facets in pannel
xlab("Values")+
ylab("percentage of each value")+
ggtitle('Scores prediction for whole Clinvar pathogenic and benign variants' )
ggp1
df_3 <- read.table('/Users/nancy/Desktop/RS_projects/data/03_ML/01_train_model/01_featureV1/02_GB_LG_CADD_Rankscore_CLINVARsplice.csv', header = TRUE, sep=',')
#df_SPIDEXzero <- read.table('/Users/nancy/Desktop/RS_projects/data/02_data_analysis/04_overlap_rankscore/03_rankscore_overlap_clinvar19_SPIDEXzero.csv', header = TRUE, sep=',')
table(df_3$CLNSIG)
#table(df_SPIDEXzero$CLNSIG)
df_new <- df_3 %>%
pivot_longer(prediction_LG:RankScore, names_to="var", values_to="val") %>%
as.data.frame()
ggp1 <-
ggplot(df_new, aes(x = val,fill=CLNSIG))+
geom_histogram(aes(y = stat(count / sum(count))), position = "identity", alpha = 0.4) +     # in each bin: (count/this bin's total count) ; position = "identity": overlap transparent
scale_y_continuous(labels = scales::percent_format()) +
facet_wrap(~factor(var,levels=c("prediction_LG","score_LG","prediction_GB", "score_GB","CADD","RankScore")), scales = 'free') +   # reorder the Facets in pannel
xlab("Values")+
ylab("percentage of each value")+
ggtitle('Scores prediction for whole Clinvar pathogenic and benign variants' )
ggp1
df_new <- df_3 %>%
pivot_longer(prediction_LG:RankScore, names_to="var", values_to="val") %>%
as.data.frame()
ggp1 <-
ggplot(df_new, aes(x = val,fill=CLNSIG))+
geom_histogram(aes(y = stat(count / sum(count))), position = "identity", alpha = 0.4) +     # in each bin: (count/this bin's total count) ; position = "identity": overlap transparent
scale_y_continuous(labels = scales::percent_format()) +
facet_wrap(~factor(var,levels=c("prediction_LG","score_LG","prediction_GB", "score_GB","CADD","RankScore")), scales = 'free') +   # reorder the Facets in pannel
xlab("Values")+
ylab("percentage of each value")+
ggtitle('Scores prediction for whole Clinvar splice variants' )
ggp1
df_new <- df_2 %>%
pivot_longer(prediction_LG:RankScore, names_to="var", values_to="val") %>%
as.data.frame()
ggp1 <-
ggplot(df_new, aes(x = val,fill=CLNSIG))+
geom_histogram(aes(y = stat(count / sum(count))), position = "identity", alpha = 0.4) +     # in each bin: (count/this bin's total count) ; position = "identity": overlap transparent
scale_y_continuous(labels = scales::percent_format()) +
facet_wrap(~factor(var,levels=c("prediction_LG","score_LG","prediction_GB", "score_GB","CADD","RankScore")), scales = 'free') +   # reorder the Facets in pannel
xlab("Values")+
ylab("percentage of each value")+
ggtitle('Scores prediction for whole Clinvar missense variants' )
ggp1
setwd("/Users/nancy/Documents/BRN/skill-assessments/Working with Genomic Variant Files")
if (!require("BiocManager"))
install.packages("BiocManager")
BiocManager::install("maftools")
library(maftools)
# view available TCGA cohorts, check that LGG is there
tcgaAvailable()
lgg <- tcgaLoad(study = "LGG")
lgg
## An oncoplot of the top five mutated genes
oncoplot(maf = lgg, top = 5)
oncoplot(maf = lgg, top = 5)
dev.off()
library(ggplot2)
my_oncoplot <- oncoplot(maf = lgg, top = 5)
ggsave(filename = "oncoplot.png", plot = my_oncoplot)
ggsave(filename = "oncoplot.png", plot = my_oncoplot)
# Open the graphics device
png("oncoplot.png", width = 1600, height = 1200)
# Create the plot
oncoplot(maf = lgg, top = 5)
# Close the device
dev.off()
my_oncoplot <- oncoplot(maf = lgg, top = 5)
ggsave(filename = "oncoplot.png", plot = my_oncoplot)
# Open the graphics device
png("oncoplot.png", width = 1600, height = 1200)
# Create the plot
oncoplot(maf = lgg, top = 5)
# Close the device
dev.off()
# Open the graphics device
png("oncoplot.png", width = 1600, height = 1200, res = 150)
# Create the plot
oncoplot(maf = lgg, top = 5)
# Close the device
dev.off()
# Open the graphics device
png("my_oncoplot.png", width = 1600, height = 1200, res = 150)
# Create the plot
oncoplot(maf = lgg, top = 5)
# Close the device
dev.off()
titv_values <- titv(maf = lgg, plot = FALSE, useSyn = TRUE)
titv_values
titv_values <- titv(maf = lgg, plot = TRUE, useSyn = TRUE)
boxplot(titv_values$TiTv, main = "Transition/Transversion Ratio", ylab = "Ratio")
# Compute the Ti/Tv ratios and create a barplot
plotTiTv(maf = lgg, plot = TRUE)
tvt_ratios <- getTiTv(maf = lgg, perSample = TRUE)
library(maftools)
\plotTiTv(lgg)
plotTiTv(lgg)
View(lgg)
lgg
summary(lgg)
plotTiTv(res = titv_values)
# Open the graphics device
png("my_titv.png", width = 1600, height = 1200, res = 150)
# create plot
plotTiTv(res = titv_values)
# Close the device
dev.off()
tcgaAvailable()
lgg
# Compute mutation load for each sample
lgg_mutload <- getSampleSummary(lgg)$Tumor_Sample_Barcode
names(lgg_mutload) <- getSampleSummary(lgg)$V1
# Print mutation load of LGG cohort
print(lgg_mutload)
brca <- tcgaLoad(study = "BRCA")
# Compute mutation load
brca_mutload <- getSampleSummary(brca)$Tumor_Sample_Barcode
names(brca_mutload) <- getSampleSummary(brca)$V1
# Combine mutation loads
all_mutload <- data.frame(
Cohort = c(rep("LGG", length(lgg_mutload)),
rep("BRCA", length(brca_mutload))),
MutLoad = c(lgg_mutload, brca_mutload)
)
View(all_mutload)
# Plot comparison
boxplot(MutLoad ~ Cohort, data = all_mutload, log = "y",
xlab = "Cohort", ylab = "Mutation Load (log scale)",
main = "Mutation Load Comparison across TCGA Cohorts")
# Plot comparison
boxplot(MutLoad ~ Cohort, data = all_mutload, log = "y",
xlab = "Cohort", ylab = "Mutation Load (log scale)",
main = "Mutation Load Comparison across TCGA Cohorts")
brac@data
brca@data
getSampleSummary(lgg)
lgg
tcgaAvailable()
# Load another cohort (e.g., LAML)
laml <- tcgaLoad(study = "LAML")
# Compute mutation load
laml_mutload <- getSampleSummary(laml)$Tumor_Sample_Barcode
names(laml_mutload) <- getSampleSummary(laml)$V1
# Combine mutation loads
all_mutload <- data.frame(
Cohort = c(rep("LGG", length(lgg_mutload)),
rep("BRCA", length(brca_mutload)),
rep("LAML", length(laml_mutload))
),
MutLoad = c(lgg_mutload, brca_mutload,laml_mutload)
)
# Plot comparison
boxplot(MutLoad ~ Cohort, data = all_mutload, log = "y",
xlab = "Cohort", ylab = "Mutation Load (log scale)",
main = "Mutation Load Comparison across TCGA Cohorts")
# Plot comparison
boxplot(MutLoad ~ Cohort, data = all_mutload, log = "y",
xlab = "Cohort", ylab = "Mutation Load (log scale)",
main = "Mutation Load Comparison across TCGA Cohorts")
# Open the graphics device
png("my_comparPlot.png", width = 1600, height = 1200, res = 150)
# Plot comparison
boxplot(MutLoad ~ Cohort, data = all_mutload, log = "y",
xlab = "Cohort", ylab = "Mutation Load (log scale)",
main = "Mutation Load Comparison across TCGA Cohorts")
# Close the device
dev.off()
